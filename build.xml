<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="PokerEngine" default="all">


    <property file="build.properties"/>
    <!-- Uncomment the following property if no tests compilation is needed -->
    <!--
   <property name="skip.tests" value="true"/>
    -->

    <!-- Compiler options -->

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="128m"/>
    <patternset id="compiler.resources">
        <include name="**/?*.properties"/>
        <include name="**/?*.xml"/>
        <include name="**/?*.html"/>
        <include name="**/?*.dtd"/>
        <include name="**/?*.tld"/>
        <include name="**/?*.gif"/>
        <include name="**/?*.png"/>
        <include name="**/?*.jpeg"/>
        <include name="**/?*.jpg"/>
    </patternset>

    <!-- Global Libraries -->

    <path id="library.junit-3.8.1.classpath">
        <pathelement location="lib/junit.jar"/>
    </path>


    <!-- Application Server Libraries -->

    <!-- Modules -->


    <!-- Module pokerengine -->

    <dirname property="module.pokerengine.basedir" file="${ant.file}"/>


    <property name="compiler.args.pokerengine" value="${compiler.args}"/>

    <property name="pokerengine.output.dir" value="${module.pokerengine.basedir}/classes"/>
    <property name="pokerengine.testoutput.dir" value="${module.pokerengine.basedir}/classes"/>

    <path id="pokerengine.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="pokerengine.module.classpath">
        <path refid="library.junit-3.8.1.classpath"/>
    </path>


    <patternset id="excluded.from.module.pokerengine">
        <exclude name=".svn/**"/>
        <exclude name="com/.svn/**"/>
        <exclude name="com/sampullara/.svn/**"/>
        <exclude name="com/sampullara/poker/.svn/**"/>
        <exclude name="com/sampullara/poker/games/.svn/**"/>
        <exclude name=".svn/**"/>
        <exclude name="com/.svn/**"/>
        <exclude name="com/sampullara/.svn/**"/>
        <exclude name="com/sampullara/poker/.svn/**"/>
        <exclude name="com/sampullara/poker/games/.svn/**"/>
    </patternset>

    <patternset id="excluded.from.compilation.pokerengine">
        <patternset refid="excluded.from.module.pokerengine"/>
    </patternset>

    <path id="pokerengine.module.sourcepath">
        <dirset dir="${module.pokerengine.basedir}">
            <include name="src"/>
        </dirset>
    </path>

    <path id="pokerengine.module.test.sourcepath">
        <dirset dir="${module.pokerengine.basedir}">
            <include name="test"/>
        </dirset>
    </path>


    <target name="compile.module.pokerengine"
            depends="compile.module.pokerengine.production,compile.module.pokerengine.tests"
            description="compile module(s) pokerengine"/>

    <target name="compile.module.pokerengine.production"
            description="compile module(s) pokerengine production classes">
        <mkdir dir="${pokerengine.output.dir}"/>
        <javac destdir="${pokerengine.output.dir}" debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true"
                >
            <compilerarg line="${compiler.args.pokerengine}"/>
            <bootclasspath refid="pokerengine.module.bootclasspath"/>
            <classpath refid="pokerengine.module.classpath"/>
            <src refid="pokerengine.module.sourcepath"/>
        </javac>
        <copy todir="${pokerengine.output.dir}">
            <fileset dir="${module.pokerengine.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.pokerengine.tests" depends="compile.module.pokerengine.production"
            description="compile module(s) pokerengine test classes" unless="skip.tests">
        <mkdir dir="${pokerengine.testoutput.dir}"/>
        <javac destdir="${pokerengine.testoutput.dir}" debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true"
                >
            <compilerarg line="${compiler.args.pokerengine}"/>
            <classpath refid="pokerengine.module.classpath"/>
            <classpath location="${pokerengine.output.dir}"/>
            <src refid="pokerengine.module.test.sourcepath"/>
        </javac>
        <copy todir="${pokerengine.testoutput.dir}">
            <fileset dir="${module.pokerengine.basedir}/test">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="clean.module.pokerengine" description="cleanup module">
        <delete dir="${pokerengine.output.dir}"/>
        <delete dir="${pokerengine.testoutput.dir}"/>
	<delete dir="test-results"/>
    </target>

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean" depends="clean.module.pokerengine" description="cleanup all"/>

    <target name="all" depends="init, clean, compile.module.pokerengine, test" description="build all"/>


    <property name="emma.dir" value="lib"/>
    <path id="emma.lib">
        <pathelement location="${emma.dir}/emma.jar"/>
        <pathelement location="${emma.dir}/emma_ant.jar"/>
    </path>

    <path id="run.classpath">
        <pathelement location="${pokerengine.output.dir}"/>
    </path>

    <property name="coverage.out.dir" value="${module.pokerengine.basedir}/test-coverage"/>
    <property name="coverage.classes.dir" value="${module.pokerengine.basedir}/coverage-classes"/>
    <property name="testresults.out.dir" value="${module.pokerengine.basedir}/test-results"/>
    <property name="test.dir" value="${module.pokerengine.basedir}/test"/>
    <property name="src.dir" value="${module.pokerengine.basedir}/src"/>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>

    <target name="test">
        <mkdir dir="${coverage.out.dir}"/>
        <mkdir dir="${coverage.classes.dir}"/>
        <mkdir dir="${testresults.out.dir}"/>

        <emma enabled="true">
            <instr instrpathref="run.classpath" destdir="${coverage.classes.dir}"
                   metadatafile="${coverage.out.dir}/metadata.emma" merge="true">
                <filter excludes="*Test*"/>
                <filter excludes="*Mock*"/>
            </instr>
        </emma>

        <property name="emma.classes" refid="emma.lib"/>

        <junit printsummary="true" fork="yes" forkmode="once" haltonfailure="no" failureproperty="tests.failed">
            <jvmarg value="-Demma.coverage.out.file=${coverage.out.dir}/coverage.emma"/>
            <jvmarg value="-server"/>
            <classpath refid="pokerengine.module.classpath"/>
            <classpath location="${coverage.classes.dir}"/>
            <classpath refid="run.classpath"/>
            <classpath refid="emma.lib"/>
            <formatter type="xml"/>
            <batchtest todir="${testresults.out.dir}">
                <fileset dir="${test.dir}" includes="**/*Test.java"/>
            </batchtest>
        </junit>

        <emma enabled="true">
            <report sourcepath="${src.dir}">
                <fileset dir="${coverage.out.dir}">
                    <include name="*.emma"/>
                </fileset>
                <html outfile="${coverage.out.dir}/coverage.html"/>
                <xml outfile="${coverage.out.dir}/coverage.xml"/>
            </report>
        </emma>

        <fail message="Build failed because of test failures." if="tests.failed"/>
    </target>

    <target name="benchjar" depends="init, clean, compile.module.pokerengine">
        <exec executable="svn" output="svninfo">
            <arg value="info"/>
        </exec>
        <property file="svninfo"/>
        <delete file="svninfo"/>
        <jar manifest="manifest" basedir="classes" jarfile="bench-${Revision}.jar">
            <zipfileset src="lib/junit.jar"/>
        </jar>
    </target>
</project>